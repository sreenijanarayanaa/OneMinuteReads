ðŸ‘‰ Suppose in the same e-commerce flow, the order is saved in MySQL but the payment fails. How would you ensure data consistency across services in this case?
In our e-commerce example:
â€¢	The Order Service saves the order in PENDING state and publishes an OrderCreated event.
â€¢	The Payment Service consumes it, processes the payment, and publishes either PaymentSuccess or PaymentFailed.
â€¢	If successful, the Order Service updates the status to CONFIRMED.
â€¢	If failed, instead of rolling back the DB insert, the Order Service triggers a compensating transaction â€” updating the order to CANCELLED.
There are two Saga implementation styles:
â€¢	Choreography: Services communicate via events (Kafka, RabbitMQ). Decentralized, simpler, but can get complex with many services.
â€¢	Orchestration: A central Saga orchestrator controls the flow. More control, but single point of dependency.
This way, we achieve eventual consistency across services without relying on distributed 2-phase commits.
